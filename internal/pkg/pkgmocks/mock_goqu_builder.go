// Code generated by mockery. DO NOT EDIT.

package pkgmocks

import (
	goqu "github.com/doug-martin/goqu/v9"
	mock "github.com/stretchr/testify/mock"
)

// MockGoquBuilder is an autogenerated mock type for the GoquBuilder type
type MockGoquBuilder struct {
	mock.Mock
}

type MockGoquBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGoquBuilder) EXPECT() *MockGoquBuilder_Expecter {
	return &MockGoquBuilder_Expecter{mock: &_m.Mock}
}

// From provides a mock function with given fields: from
func (_m *MockGoquBuilder) From(from ...interface{}) *goqu.SelectDataset {
	var _ca []interface{}
	_ca = append(_ca, from...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for From")
	}

	var r0 *goqu.SelectDataset
	if rf, ok := ret.Get(0).(func(...interface{}) *goqu.SelectDataset); ok {
		r0 = rf(from...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goqu.SelectDataset)
		}
	}

	return r0
}

// MockGoquBuilder_From_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'From'
type MockGoquBuilder_From_Call struct {
	*mock.Call
}

// From is a helper method to define mock.On call
//   - from ...interface{}
func (_e *MockGoquBuilder_Expecter) From(from ...interface{}) *MockGoquBuilder_From_Call {
	return &MockGoquBuilder_From_Call{Call: _e.mock.On("From",
		append([]interface{}{}, from...)...)}
}

func (_c *MockGoquBuilder_From_Call) Run(run func(from ...interface{})) *MockGoquBuilder_From_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockGoquBuilder_From_Call) Return(_a0 *goqu.SelectDataset) *MockGoquBuilder_From_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoquBuilder_From_Call) RunAndReturn(run func(...interface{}) *goqu.SelectDataset) *MockGoquBuilder_From_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: table
func (_m *MockGoquBuilder) Insert(table interface{}) *goqu.InsertDataset {
	ret := _m.Called(table)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 *goqu.InsertDataset
	if rf, ok := ret.Get(0).(func(interface{}) *goqu.InsertDataset); ok {
		r0 = rf(table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goqu.InsertDataset)
		}
	}

	return r0
}

// MockGoquBuilder_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockGoquBuilder_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - table interface{}
func (_e *MockGoquBuilder_Expecter) Insert(table interface{}) *MockGoquBuilder_Insert_Call {
	return &MockGoquBuilder_Insert_Call{Call: _e.mock.On("Insert", table)}
}

func (_c *MockGoquBuilder_Insert_Call) Run(run func(table interface{})) *MockGoquBuilder_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockGoquBuilder_Insert_Call) Return(_a0 *goqu.InsertDataset) *MockGoquBuilder_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoquBuilder_Insert_Call) RunAndReturn(run func(interface{}) *goqu.InsertDataset) *MockGoquBuilder_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// Select provides a mock function with given fields: cols
func (_m *MockGoquBuilder) Select(cols ...interface{}) *goqu.SelectDataset {
	var _ca []interface{}
	_ca = append(_ca, cols...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Select")
	}

	var r0 *goqu.SelectDataset
	if rf, ok := ret.Get(0).(func(...interface{}) *goqu.SelectDataset); ok {
		r0 = rf(cols...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goqu.SelectDataset)
		}
	}

	return r0
}

// MockGoquBuilder_Select_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Select'
type MockGoquBuilder_Select_Call struct {
	*mock.Call
}

// Select is a helper method to define mock.On call
//   - cols ...interface{}
func (_e *MockGoquBuilder_Expecter) Select(cols ...interface{}) *MockGoquBuilder_Select_Call {
	return &MockGoquBuilder_Select_Call{Call: _e.mock.On("Select",
		append([]interface{}{}, cols...)...)}
}

func (_c *MockGoquBuilder_Select_Call) Run(run func(cols ...interface{})) *MockGoquBuilder_Select_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *MockGoquBuilder_Select_Call) Return(_a0 *goqu.SelectDataset) *MockGoquBuilder_Select_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoquBuilder_Select_Call) RunAndReturn(run func(...interface{}) *goqu.SelectDataset) *MockGoquBuilder_Select_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: table
func (_m *MockGoquBuilder) Update(table interface{}) *goqu.UpdateDataset {
	ret := _m.Called(table)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *goqu.UpdateDataset
	if rf, ok := ret.Get(0).(func(interface{}) *goqu.UpdateDataset); ok {
		r0 = rf(table)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*goqu.UpdateDataset)
		}
	}

	return r0
}

// MockGoquBuilder_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockGoquBuilder_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - table interface{}
func (_e *MockGoquBuilder_Expecter) Update(table interface{}) *MockGoquBuilder_Update_Call {
	return &MockGoquBuilder_Update_Call{Call: _e.mock.On("Update", table)}
}

func (_c *MockGoquBuilder_Update_Call) Run(run func(table interface{})) *MockGoquBuilder_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockGoquBuilder_Update_Call) Return(_a0 *goqu.UpdateDataset) *MockGoquBuilder_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGoquBuilder_Update_Call) RunAndReturn(run func(interface{}) *goqu.UpdateDataset) *MockGoquBuilder_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGoquBuilder creates a new instance of MockGoquBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGoquBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGoquBuilder {
	mock := &MockGoquBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
