// Code generated by mockery. DO NOT EDIT.

package pkgmocks

import (
	pkguid "github.com/shandysiswandi/test-amartha/internal/pkg/pkguid"
	mock "github.com/stretchr/testify/mock"
)

// MockSnowflake is an autogenerated mock type for the Snowflake type
type MockSnowflake struct {
	mock.Mock
}

type MockSnowflake_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSnowflake) EXPECT() *MockSnowflake_Expecter {
	return &MockSnowflake_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function with given fields:
func (_m *MockSnowflake) Generate() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// MockSnowflake_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type MockSnowflake_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
func (_e *MockSnowflake_Expecter) Generate() *MockSnowflake_Generate_Call {
	return &MockSnowflake_Generate_Call{Call: _e.mock.On("Generate")}
}

func (_c *MockSnowflake_Generate_Call) Run(run func()) *MockSnowflake_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSnowflake_Generate_Call) Return(_a0 uint64) *MockSnowflake_Generate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSnowflake_Generate_Call) RunAndReturn(run func() uint64) *MockSnowflake_Generate_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateInt64 provides a mock function with given fields:
func (_m *MockSnowflake) GenerateInt64() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateInt64")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// MockSnowflake_GenerateInt64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateInt64'
type MockSnowflake_GenerateInt64_Call struct {
	*mock.Call
}

// GenerateInt64 is a helper method to define mock.On call
func (_e *MockSnowflake_Expecter) GenerateInt64() *MockSnowflake_GenerateInt64_Call {
	return &MockSnowflake_GenerateInt64_Call{Call: _e.mock.On("GenerateInt64")}
}

func (_c *MockSnowflake_GenerateInt64_Call) Run(run func()) *MockSnowflake_GenerateInt64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSnowflake_GenerateInt64_Call) Return(_a0 int64) *MockSnowflake_GenerateInt64_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSnowflake_GenerateInt64_Call) RunAndReturn(run func() int64) *MockSnowflake_GenerateInt64_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateSfID provides a mock function with given fields:
func (_m *MockSnowflake) GenerateSfID() pkguid.ID {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateSfID")
	}

	var r0 pkguid.ID
	if rf, ok := ret.Get(0).(func() pkguid.ID); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(pkguid.ID)
	}

	return r0
}

// MockSnowflake_GenerateSfID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateSfID'
type MockSnowflake_GenerateSfID_Call struct {
	*mock.Call
}

// GenerateSfID is a helper method to define mock.On call
func (_e *MockSnowflake_Expecter) GenerateSfID() *MockSnowflake_GenerateSfID_Call {
	return &MockSnowflake_GenerateSfID_Call{Call: _e.mock.On("GenerateSfID")}
}

func (_c *MockSnowflake_GenerateSfID_Call) Run(run func()) *MockSnowflake_GenerateSfID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSnowflake_GenerateSfID_Call) Return(_a0 pkguid.ID) *MockSnowflake_GenerateSfID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSnowflake_GenerateSfID_Call) RunAndReturn(run func() pkguid.ID) *MockSnowflake_GenerateSfID_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateString provides a mock function with given fields:
func (_m *MockSnowflake) GenerateString() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateString")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSnowflake_GenerateString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateString'
type MockSnowflake_GenerateString_Call struct {
	*mock.Call
}

// GenerateString is a helper method to define mock.On call
func (_e *MockSnowflake_Expecter) GenerateString() *MockSnowflake_GenerateString_Call {
	return &MockSnowflake_GenerateString_Call{Call: _e.mock.On("GenerateString")}
}

func (_c *MockSnowflake_GenerateString_Call) Run(run func()) *MockSnowflake_GenerateString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSnowflake_GenerateString_Call) Return(_a0 string) *MockSnowflake_GenerateString_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSnowflake_GenerateString_Call) RunAndReturn(run func() string) *MockSnowflake_GenerateString_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSnowflake creates a new instance of MockSnowflake. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSnowflake(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSnowflake {
	mock := &MockSnowflake{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
